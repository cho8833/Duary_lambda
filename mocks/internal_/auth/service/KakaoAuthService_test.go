// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/cho8833/duary_lambda/internal/auth/dto"
	mock "github.com/stretchr/testify/mock"
)

// KakaoAuthService is an autogenerated mock type for the KakaoAuthService type
type KakaoAuthService struct {
	mock.Mock
}

type KakaoAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *KakaoAuthService) EXPECT() *KakaoAuthService_Expecter {
	return &KakaoAuthService_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function with given fields: token
func (_m *KakaoAuthService) SignIn(token dto.KakaoOAuthToken) (dto.SignInRes, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 dto.SignInRes
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.KakaoOAuthToken) (dto.SignInRes, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(dto.KakaoOAuthToken) dto.SignInRes); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(dto.SignInRes)
	}

	if rf, ok := ret.Get(1).(func(dto.KakaoOAuthToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KakaoAuthService_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type KakaoAuthService_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - token dto.KakaoOAuthToken
func (_e *KakaoAuthService_Expecter) SignIn(token interface{}) *KakaoAuthService_SignIn_Call {
	return &KakaoAuthService_SignIn_Call{Call: _e.mock.On("SignIn", token)}
}

func (_c *KakaoAuthService_SignIn_Call) Run(run func(token dto.KakaoOAuthToken)) *KakaoAuthService_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.KakaoOAuthToken))
	})
	return _c
}

func (_c *KakaoAuthService_SignIn_Call) Return(_a0 dto.SignInRes, _a1 error) *KakaoAuthService_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KakaoAuthService_SignIn_Call) RunAndReturn(run func(dto.KakaoOAuthToken) (dto.SignInRes, error)) *KakaoAuthService_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// NewKakaoAuthService creates a new instance of KakaoAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKakaoAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *KakaoAuthService {
	mock := &KakaoAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
