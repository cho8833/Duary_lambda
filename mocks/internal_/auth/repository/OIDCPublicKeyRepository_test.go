// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/cho8833/duary_lambda/internal/auth/dto"
	mock "github.com/stretchr/testify/mock"
)

// OIDCPublicKeyRepository is an autogenerated mock type for the OIDCPublicKeyRepository type
type OIDCPublicKeyRepository struct {
	mock.Mock
}

type OIDCPublicKeyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OIDCPublicKeyRepository) EXPECT() *OIDCPublicKeyRepository_Expecter {
	return &OIDCPublicKeyRepository_Expecter{mock: &_m.Mock}
}

// FindPublicKeyInDB provides a mock function with given fields: provider
func (_m *OIDCPublicKeyRepository) FindPublicKeyInDB(provider string) (*dto.CertResponse, error) {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for FindPublicKeyInDB")
	}

	var r0 *dto.CertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.CertResponse, error)); ok {
		return rf(provider)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.CertResponse); ok {
		r0 = rf(provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OIDCPublicKeyRepository_FindPublicKeyInDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPublicKeyInDB'
type OIDCPublicKeyRepository_FindPublicKeyInDB_Call struct {
	*mock.Call
}

// FindPublicKeyInDB is a helper method to define mock.On call
//   - provider string
func (_e *OIDCPublicKeyRepository_Expecter) FindPublicKeyInDB(provider interface{}) *OIDCPublicKeyRepository_FindPublicKeyInDB_Call {
	return &OIDCPublicKeyRepository_FindPublicKeyInDB_Call{Call: _e.mock.On("FindPublicKeyInDB", provider)}
}

func (_c *OIDCPublicKeyRepository_FindPublicKeyInDB_Call) Run(run func(provider string)) *OIDCPublicKeyRepository_FindPublicKeyInDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OIDCPublicKeyRepository_FindPublicKeyInDB_Call) Return(_a0 *dto.CertResponse, _a1 error) *OIDCPublicKeyRepository_FindPublicKeyInDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OIDCPublicKeyRepository_FindPublicKeyInDB_Call) RunAndReturn(run func(string) (*dto.CertResponse, error)) *OIDCPublicKeyRepository_FindPublicKeyInDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicJWK provides a mock function with given fields: url
func (_m *OIDCPublicKeyRepository) GetPublicJWK(url string) (*dto.CertResponse, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicJWK")
	}

	var r0 *dto.CertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.CertResponse, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.CertResponse); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OIDCPublicKeyRepository_GetPublicJWK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicJWK'
type OIDCPublicKeyRepository_GetPublicJWK_Call struct {
	*mock.Call
}

// GetPublicJWK is a helper method to define mock.On call
//   - url string
func (_e *OIDCPublicKeyRepository_Expecter) GetPublicJWK(url interface{}) *OIDCPublicKeyRepository_GetPublicJWK_Call {
	return &OIDCPublicKeyRepository_GetPublicJWK_Call{Call: _e.mock.On("GetPublicJWK", url)}
}

func (_c *OIDCPublicKeyRepository_GetPublicJWK_Call) Run(run func(url string)) *OIDCPublicKeyRepository_GetPublicJWK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OIDCPublicKeyRepository_GetPublicJWK_Call) Return(_a0 *dto.CertResponse, _a1 error) *OIDCPublicKeyRepository_GetPublicJWK_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OIDCPublicKeyRepository_GetPublicJWK_Call) RunAndReturn(run func(string) (*dto.CertResponse, error)) *OIDCPublicKeyRepository_GetPublicJWK_Call {
	_c.Call.Return(run)
	return _c
}

// SaveJWK provides a mock function with given fields: provider, jwks
func (_m *OIDCPublicKeyRepository) SaveJWK(provider string, jwks []dto.JWK) error {
	ret := _m.Called(provider, jwks)

	if len(ret) == 0 {
		panic("no return value specified for SaveJWK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []dto.JWK) error); ok {
		r0 = rf(provider, jwks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OIDCPublicKeyRepository_SaveJWK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveJWK'
type OIDCPublicKeyRepository_SaveJWK_Call struct {
	*mock.Call
}

// SaveJWK is a helper method to define mock.On call
//   - provider string
//   - jwks []dto.JWK
func (_e *OIDCPublicKeyRepository_Expecter) SaveJWK(provider interface{}, jwks interface{}) *OIDCPublicKeyRepository_SaveJWK_Call {
	return &OIDCPublicKeyRepository_SaveJWK_Call{Call: _e.mock.On("SaveJWK", provider, jwks)}
}

func (_c *OIDCPublicKeyRepository_SaveJWK_Call) Run(run func(provider string, jwks []dto.JWK)) *OIDCPublicKeyRepository_SaveJWK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]dto.JWK))
	})
	return _c
}

func (_c *OIDCPublicKeyRepository_SaveJWK_Call) Return(_a0 error) *OIDCPublicKeyRepository_SaveJWK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OIDCPublicKeyRepository_SaveJWK_Call) RunAndReturn(run func(string, []dto.JWK) error) *OIDCPublicKeyRepository_SaveJWK_Call {
	_c.Call.Return(run)
	return _c
}

// NewOIDCPublicKeyRepository creates a new instance of OIDCPublicKeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOIDCPublicKeyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OIDCPublicKeyRepository {
	mock := &OIDCPublicKeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
